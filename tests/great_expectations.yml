# =======================================================================
#  GREAT EXPECTATIONS CONFIGURACI√ìN PRINCIPAL
#  Laboratorio: interop_masterdata_fhir_colombia
#  Datasource: interop_db_hcd_catalog
#  Esquema: hcd
#  Objetivo: Validaci√≥n autom√°tica de datos maestros y cl√≠nicos
#  Compatible con PostgreSQL y Citus - Python 3.8
# =======================================================================

datasource_name: interop_db_hcd_catalog
execution_engine:
  class_name: SqlAlchemyExecutionEngine
  connection_string: postgresql://postgres:postgres@localhost:5432/interop_db

data_connectors:
  default_runtime_data_connector_name:
    class_name: RuntimeDataConnector
    batch_identifiers:
      - default_identifier_name

# =======================================================================
# EXPECTATION SUITES POR TABLA
# =======================================================================

expectation_suites:

# -----------------------------------------------------------------------
# 1. Tabla: usuario  (FHIR: Patient)
# -----------------------------------------------------------------------
- expectation_suite_name: validar_usuario
  expectations:

    # Clave primaria no nula y √∫nica
    - expect_column_values_to_not_be_null:
        column: documento_id
    - expect_column_values_to_be_unique:
        column: documento_id

    # Campos obligatorios
    - expect_column_values_to_not_be_null:
        column: nombre_completo
    - expect_column_values_to_not_be_null:
        column: fecha_nacimiento
    - expect_column_values_to_not_be_null:
        column: sexo

    # Sexo debe estar en dominio permitido
    - expect_column_values_to_be_in_set:
        column: sexo
        value_set: ["M", "F", "Intersex"]

    # Zona de residencia dominio cerrado
    - expect_column_values_to_be_in_set:
        column: zona_residencia
        value_set: ["Urbana", "Rural", "Dispersa", null]

    # Edad entre 0 y 130
    - expect_column_values_to_be_between:
        column: edad
        min_value: 0
        max_value: 130

    # Pa√≠s debe estar en cat√°logo ISO-3166 (validaci√≥n indirecta)
    - expect_column_values_to_match_regex:
        column: pais_nacionalidad
        regex: "^[A-Z]{2,3}$"

# -----------------------------------------------------------------------
# 2. Tabla: atencion (FHIR: Encounter)
# -----------------------------------------------------------------------
- expectation_suite_name: validar_atencion
  expectations:

    # PK y FK v√°lidas
    - expect_column_values_to_not_be_null:
        column: atencion_id
    - expect_column_values_to_be_unique:
        column: atencion_id
    - expect_column_values_to_not_be_null:
        column: documento_id

    # Modalidad de entrega dominio cerrado
    - expect_column_values_to_be_in_set:
        column: modalidad_entrega
        value_set: ["Presencial", "Telemedicina", "Domiciliaria"]

    # Entorno de atenci√≥n dominio cerrado
    - expect_column_values_to_be_in_set:
        column: entorno_atencion
        value_set: ["Urgencias", "Hospitalizaci√≥n", "Consulta", "UCI", "Procedimiento", "Domiciliaria"]

    # Clasificaci√≥n de triage
    - expect_column_values_to_be_in_set:
        column: clasificacion_triage
        value_set: ["1", "2", "3", "4", "5", null]

    # Validaci√≥n temporal: fecha_triage ‚â• fecha_ingreso
    - expect_column_pair_values_A_to_be_greater_than_B:
        column_A: fecha_triage
        column_B: fecha_ingreso
        mostly: 0.9

# -----------------------------------------------------------------------
# 3. Tabla: tecnologia_salud (FHIR: MedicationAdministration / Procedure)
# -----------------------------------------------------------------------
- expectation_suite_name: validar_tecnologia_salud
  expectations:

    - expect_column_values_to_not_be_null:
        column: tecnologia_id
    - expect_column_values_to_be_unique:
        column: tecnologia_id

    - expect_column_values_to_not_be_null:
        column: descripcion_medicamento

    # V√≠a de administraci√≥n debe corresponder a un concepto SNOMED (num√©rico)
    - expect_column_values_to_match_regex:
        column: via_administracion
        regex: "^[0-9]{5,10}$"

    # D√≠as de tratamiento deben estar en rango 0‚Äì365
    - expect_column_values_to_be_between:
        column: dias_tratamiento
        min_value: 0
        max_value: 365

    # Unidades aplicadas ‚â• 0
    - expect_column_values_to_be_between:
        column: unidades_aplicadas
        min_value: 0

# -----------------------------------------------------------------------
# 4. Tabla: diagnostico (FHIR: Condition)
# -----------------------------------------------------------------------
- expectation_suite_name: validar_diagnostico
  expectations:

    - expect_column_values_to_not_be_null:
        column: diagnostico_id
    - expect_column_values_to_be_unique:
        column: diagnostico_id

    - expect_column_values_to_not_be_null:
        column: diagnostico_ingreso

    # Diagn√≥sticos deben seguir formato CIE-10 (letra + 2 d√≠gitos opcional)
    - expect_column_values_to_match_regex:
        column: diagnostico_ingreso
        regex: "^[A-Z][0-9]{2}[A-Z0-9]?$"

    - expect_column_values_to_match_regex:
        column: diagnostico_egreso
        regex: "^[A-Z][0-9]{2}[A-Z0-9]?$"

    # Tipo de diagn√≥stico: presuntivo o confirmado
    - expect_column_values_to_be_in_set:
        column: tipo_diagnostico_ingreso
        value_set: ["Presuntivo", "Confirmado", null]

    - expect_column_values_to_be_in_set:
        column: tipo_diagnostico_egreso
        value_set: ["Presuntivo", "Confirmado", "Definitivo", null]

# -----------------------------------------------------------------------
#  5. Tabla: egreso (FHIR: Encounter.dischargeDisposition)
# -----------------------------------------------------------------------
- expectation_suite_name: validar_egreso
  expectations:

    - expect_column_values_to_not_be_null:
        column: egreso_id
    - expect_column_values_to_be_unique:
        column: egreso_id

    - expect_column_values_to_not_be_null:
        column: fecha_salida
    - expect_column_values_to_not_be_null:
        column: condicion_salida

    # Condici√≥n de salida dominio cerrado
    - expect_column_values_to_be_in_set:
        column: condicion_salida
        value_set: ["Vivo", "Mejorado", "Remitido", "Fallecido"]

    # Validaci√≥n temporal: fecha_salida ‚â• fecha_ingreso (join l√≥gico con atencion)
    - expect_column_pair_values_A_to_be_greater_than_B:
        column_A: fecha_salida
        column_B: fecha_ingreso
        mostly: 0.95

# -----------------------------------------------------------------------
# üë®‚Äç‚öïÔ∏è 6. Tabla: profesional_salud (FHIR: Practitioner)
# -----------------------------------------------------------------------
- expectation_suite_name: validar_profesional_salud
  expectations:

    - expect_column_values_to_not_be_null:
        column: id_personal_salud
    - expect_column_values_to_be_unique:
        column: id_personal_salud

    - expect_column_values_to_not_be_null:
        column: nombre
    - expect_column_values_to_not_be_null:
        column: especialidad

    # Nombre debe contener letras y espacios (sin caracteres especiales)
    - expect_column_values_to_match_regex:
        column: nombre
        regex: "^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√±\\s]+$"

# =======================================================================
# üìå INSTRUCCIONES PARA EJECUTAR VALIDACIONES
# =======================================================================
# 1. Inicia el contenedor con la BD interop_db:
#     docker-compose up -d
#
#  2. Accede al contenedor donde tengas Great Expectations instalado:
#     docker exec -it interop_container bash
#
# 3. Ve al directorio de tests:
#     cd /tests
#
# ‚ñ∂Ô∏è 4. Ejecuta un checkpoint de validaci√≥n por tabla:
#     great_expectations checkpoint run validar_usuario
#
# ‚ñ∂Ô∏è 5. Ejecuta todas las validaciones:
#     great_expectations checkpoint run validar_atencion
#     great_expectations checkpoint run validar_tecnologia_salud
#     great_expectations checkpoint run validar_diagnostico
#     great_expectations checkpoint run validar_egreso
#     great_expectations checkpoint run validar_profesional_salud
#
#  6. Genera el reporte HTML de resultados:
#     python tests/validate_data.py
#
# 7. Abre el reporte en tu navegador:
#     file:///reports/ge_report.html
#
# Consejo: Puedes automatizar la ejecuci√≥n con un script en CI/CD
#    para validar la calidad de datos cada vez que se actualice la BD.
# =======================================================================
